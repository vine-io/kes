/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.vine_io.kes.apiserver_runtime.sample.pkg.apis.sample.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/vine-io/kes/apiserver-runtime/sample/pkg/apis/sample/v1alpha1";

// Fischer defines the schema for the "fischers" resource.
message Fischer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // DisallowedFlunders holds a list of Flunder.Names that are disallowed.
  repeated string disallowedFlunders = 2;

  optional FischerStatus status = 3;
}

// FischerList is a list of Fischer objects.
message FischerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Fischer items = 2;
}

message FischerStatus {
}

// Flunder defines the schema for the "flunders" resource.
message Flunder {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FlunderSpec spec = 2;

  optional FlunderStatus status = 3;
}

// FlunderList is a list of Flunder objects.
message FlunderList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Flunder items = 2;
}

// FlunderSpec is the specification of a Flunder.
message FlunderSpec {
  // A name of another flunder, mutually exclusive to the FischerReference.
  optional string flunderReference = 1;

  // A name of a fischer, mutually exclusive to the FlunderReference.
  optional string fischerReference = 2;

  // The reference type.
  optional string referenceType = 3;
}

// FlunderStatus is the status of a Flunder.
message FlunderStatus {
}

// Fortune defines the schema for the "fortunes" resource.
message Fortune {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional string value = 2;
}

// FortuneList is a list of Fortune objects.
message FortuneList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Fortune items = 2;
}

